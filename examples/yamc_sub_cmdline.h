/** @file yamc_sub_cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef YAMC_SUB_CMDLINE_H
#define YAMC_SUB_CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef YAMC_SUB_CMD_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define YAMC_SUB_CMD_PARSER_PACKAGE "yamc_sub"
#endif

#ifndef YAMC_SUB_CMD_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define YAMC_SUB_CMD_PARSER_PACKAGE_NAME "yamc_sub"
#endif

#ifndef YAMC_SUB_CMD_PARSER_VERSION
/** @brief the program version */
#define YAMC_SUB_CMD_PARSER_VERSION "1.0.0"
#endif

/** @brief Where the command line options are stored */
struct yamc_sub_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * host_arg;	/**< @brief host to connect to. (default='localhost').  */
  char * host_orig;	/**< @brief host to connect to. original value given at command line.  */
  const char *host_help; /**< @brief host to connect to. help description.  */
  short port_arg;	/**< @brief port to connect to. (default='1883').  */
  char * port_orig;	/**< @brief port to connect to. original value given at command line.  */
  const char *port_help; /**< @brief port to connect to. help description.  */
  char * user_arg;	/**< @brief User name to login to host.  */
  char * user_orig;	/**< @brief User name to login to host original value given at command line.  */
  const char *user_help; /**< @brief User name to login to host help description.  */
  char * password_arg;	/**< @brief Password to login to host.  */
  char * password_orig;	/**< @brief Password to login to host original value given at command line.  */
  const char *password_help; /**< @brief Password to login to host help description.  */
  char ** topic_arg;	/**< @brief MQTT topic to subscribe. Can be specified multiple times..  */
  char ** topic_orig;	/**< @brief MQTT topic to subscribe. Can be specified multiple times. original value given at command line.  */
  unsigned int topic_min; /**< @brief MQTT topic to subscribe. Can be specified multiple times.'s minimum occurreces */
  unsigned int topic_max; /**< @brief MQTT topic to subscribe. Can be specified multiple times.'s maximum occurreces */
  const char *topic_help; /**< @brief MQTT topic to subscribe. Can be specified multiple times. help description.  */
  char * client_id_arg;	/**< @brief MQTT Client ID.  */
  char * client_id_orig;	/**< @brief MQTT Client ID original value given at command line.  */
  const char *client_id_help; /**< @brief MQTT Client ID help description.  */
  short qos_arg;	/**< @brief QoS level for the message. (default='0').  */
  char * qos_orig;	/**< @brief QoS level for the message. original value given at command line.  */
  const char *qos_help; /**< @brief QoS level for the message. help description.  */
  int no_clean_session_flag;	/**< @brief Specify this to disable clean session flag. (default=off).  */
  const char *no_clean_session_help; /**< @brief Specify this to disable clean session flag. help description.  */
  short keepalive_timeout_arg;	/**< @brief Session keep alive timeout in seconds. (default='30').  */
  char * keepalive_timeout_orig;	/**< @brief Session keep alive timeout in seconds. original value given at command line.  */
  const char *keepalive_timeout_help; /**< @brief Session keep alive timeout in seconds. help description.  */
  char * will_topic_arg;	/**< @brief MQTT will topic..  */
  char * will_topic_orig;	/**< @brief MQTT will topic. original value given at command line.  */
  const char *will_topic_help; /**< @brief MQTT will topic. help description.  */
  char * will_msg_arg;	/**< @brief MQTT will message..  */
  char * will_msg_orig;	/**< @brief MQTT will message. original value given at command line.  */
  const char *will_msg_help; /**< @brief MQTT will message. help description.  */
  int will_remain_flag;	/**< @brief Specify this to enable will remain flag. (default=off).  */
  const char *will_remain_help; /**< @brief Specify this to enable will remain flag. help description.  */
  short will_qos_arg;	/**< @brief QoS level for the message. (default='0').  */
  char * will_qos_orig;	/**< @brief QoS level for the message. original value given at command line.  */
  const char *will_qos_help; /**< @brief QoS level for the message. help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int host_given ;	/**< @brief Whether host was given.  */
  unsigned int port_given ;	/**< @brief Whether port was given.  */
  unsigned int user_given ;	/**< @brief Whether user was given.  */
  unsigned int password_given ;	/**< @brief Whether password was given.  */
  unsigned int topic_given ;	/**< @brief Whether topic was given.  */
  unsigned int client_id_given ;	/**< @brief Whether client-id was given.  */
  unsigned int qos_given ;	/**< @brief Whether qos was given.  */
  unsigned int no_clean_session_given ;	/**< @brief Whether no-clean-session was given.  */
  unsigned int keepalive_timeout_given ;	/**< @brief Whether keepalive-timeout was given.  */
  unsigned int will_topic_given ;	/**< @brief Whether will-topic was given.  */
  unsigned int will_msg_given ;	/**< @brief Whether will-msg was given.  */
  unsigned int will_remain_given ;	/**< @brief Whether will-remain was given.  */
  unsigned int will_qos_given ;	/**< @brief Whether will-qos was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct yamc_sub_cmd_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure yamc_sub_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure yamc_sub_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *yamc_sub_args_info_purpose;
/** @brief the usage string of the program */
extern const char *yamc_sub_args_info_usage;
/** @brief the description string of the program */
extern const char *yamc_sub_args_info_description;
/** @brief all the lines making the help output */
extern const char *yamc_sub_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int yamc_sub_cmd_parser (int argc, char **argv,
  struct yamc_sub_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use yamc_sub_cmd_parser_ext() instead
 */
int yamc_sub_cmd_parser2 (int argc, char **argv,
  struct yamc_sub_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int yamc_sub_cmd_parser_ext (int argc, char **argv,
  struct yamc_sub_args_info *args_info,
  struct yamc_sub_cmd_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int yamc_sub_cmd_parser_dump(FILE *outfile,
  struct yamc_sub_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int yamc_sub_cmd_parser_file_save(const char *filename,
  struct yamc_sub_args_info *args_info);

/**
 * Print the help
 */
void yamc_sub_cmd_parser_print_help(void);
/**
 * Print the version
 */
void yamc_sub_cmd_parser_print_version(void);

/**
 * Initializes all the fields a yamc_sub_cmd_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void yamc_sub_cmd_parser_params_init(struct yamc_sub_cmd_parser_params *params);

/**
 * Allocates dynamically a yamc_sub_cmd_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized yamc_sub_cmd_parser_params structure
 */
struct yamc_sub_cmd_parser_params *yamc_sub_cmd_parser_params_create(void);

/**
 * Initializes the passed yamc_sub_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void yamc_sub_cmd_parser_init (struct yamc_sub_args_info *args_info);
/**
 * Deallocates the string fields of the yamc_sub_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void yamc_sub_cmd_parser_free (struct yamc_sub_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int yamc_sub_cmd_parser_required (struct yamc_sub_args_info *args_info,
  const char *prog_name);

extern const char *yamc_sub_cmd_parser_qos_values[];  /**< @brief Possible values for qos. */
extern const char *yamc_sub_cmd_parser_will_qos_values[];  /**< @brief Possible values for will-qos. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* YAMC_SUB_CMDLINE_H */
